import streamlit as st
import google.generativeai as genai
import sys
from pathlib import Path
import traceback
import os
from dotenv import load_dotenv

# --- CONFIGURA√á√ÉO DA P√ÅGINA (DEVE SER A PRIMEIRA CHAMADA STREAMLIT) ---
st.set_page_config(page_title="Assistente Jur√≠dico IA", layout="wide", initial_sidebar_state="expanded")
# --- FIM DA CONFIGURA√á√ÉO DA P√ÅGINA ---

# Configura caminhos para que os m√≥dulos em 'utils' e 'services' possam ser importados
# Isso √© essencial quando a estrutura do projeto √© modular.
sys.path.append(str(Path(__file__).parent))

# Tenta importar os m√≥dulos. Se houver algum erro, exibe uma mensagem e para o app.
try:
    from utils.document_parser import parse_legal_document
    from utils.legal_api import fetch_jurisprudence
    from services.defense_strategy import generate_defense
    from services.accusation_strategy import generate_accusation
except ImportError as e:
    st.error(f"Erro de importa√ß√£o de m√≥dulo: {str(e)}")
    st.info("Verifique se os arquivos nas pastas 'utils' e 'services' existem e se seus nomes est√£o corretos.")
    st.info(f"O problema pode estar no m√≥dulo: {e.name}")
    st.stop()

# --- BLOC√îNICO DE CONFIGURA√á√ÉO DA CHAVE DE API DO GOOGLE GEMINI ---
API_KEY = None
try:
    # Tenta carregar a chave do Streamlit Secrets (ideal para Streamlit Cloud)
    # st.secrets √© um dicion√°rio, e "GOOGLE_API_KEY" √© o NOME da chave que voc√™ configurou.
    API_KEY = st.secrets["GOOGLE_API_KEY"]
except KeyError:
    # Se n√£o estiver em st.secrets (ex: rodando localmente), tenta carregar do arquivo .env
    load_dotenv() # Carrega as vari√°veis do arquivo .env da raiz do projeto
    # os.getenv() pega o valor da vari√°vel de ambiente com o NOME especificado.
    API_KEY = os.getenv("GOOGLE_API_KEY")

# Verifica se a chave foi carregada. Se n√£o, exibe um erro e impede o app de rodar.
if not API_KEY:
    st.error("Erro cr√≠tico: A chave da API do Google Gemini n√£o foi encontrada.")
    st.error("Por favor, configure-a corretamente:")
    st.error("- **No Streamlit Cloud:** V√° em 'Manage app' -> 'Secrets' e adicione `GOOGLE_API_KEY=\"SUA_CHAVE_AQUI\"`")
    st.error("- **Localmente:** Crie um arquivo `.env` na raiz do seu projeto com `GOOGLE_API_KEY=\"SUA_CHAVE_AQUI\"`")
    st.stop() # Interrompe a execu√ß√£o do Streamlit se a chave n√£o for encontrada

# Configura o SDK do Google Gemini com a chave de API
genai.configure(api_key=API_KEY)
# Define o modelo de IA a ser usado. 'gemini-1.5-flash' √© r√°pido e econ√¥mico.
model = genai.GenerativeModel('gemini-1.5-flash')
# --- FIM DO BLOC√îNICO DE CONFIGURA√á√ÉO ---


def main():
    # T√≠tulo principal do aplicativo na p√°gina
    st.title("ü§ñ Assistente Jur√≠dico Inteligente")

    # Sidebar para configura√ß√µes globais do aplicativo
    with st.sidebar:
        st.header("Configura√ß√µes")
        area_juridica = st.selectbox("√Årea Jur√≠dica", ["Civil", "Criminal", "Previdenci√°rio", "Outra"])
        tipo_acao = st.radio("Tipo de A√ß√£o", ["Defesa", "Acusa√ß√£o"])
        contexto_estrategia = st.text_area(
            "Contexto ou Ponto Principal da Estrat√©gia (opcional):",
            "Ex: 'foco na aus√™ncia de provas', 'alegar cerceamento de defesa'"
        )

    # Cria√ß√£o de abas para organizar o conte√∫do do aplicativo
    tab1, tab2, tab3 = st.tabs(["An√°lise e Upload", "Estrat√©gia e Argumentos", "Legisla√ß√£o e Jurisprud√™ncia"])

    # --- Aba 1: An√°lise e Upload de Documentos ---
    with tab1:
        st.subheader("1. Carregue e Analise a Pe√ßa Jur√≠dica")
        uploaded_file = st.file_uploader("Carregue a pe√ßa jur√≠dica", type=["pdf", "docx"])
        document_text_input = st.text_area("Ou cole o texto da pe√ßa jur√≠dica aqui (se preferir ou para testes r√°pidos):", height=300)

        # L√≥gica para determinar qual texto usar (upload ou cola)
        if uploaded_file:
            try:
                # Prioriza o upload de arquivo se houver
                text_from_file = parse_legal_document(uploaded_file)
                st.session_state.document_text = text_from_file
                st.success("Documento processado do arquivo com sucesso!")
                with st.expander("Visualizar texto extra√≠do do arquivo"):
                    st.text(text_from_file[:5000] + ("..." if len(text_from_file) > 5000 else "")) # Limita exibi√ß√£o para n√£o sobrecarregar
            except Exception as e:
                st.error(f"Erro ao processar documento carregado: {str(e)}")
                st.info("Certifique-se de que o arquivo PDF/DOCX est√° bem formatado e n√£o est√° corrompido.")
                st.exception(e) # Exibe o traceback completo para depura√ß√£o
        elif document_text_input: # Se n√£o houver upload, usa o texto colado
            st.session_state.document_text = document_text_input
            st.success("Texto colado processado com sucesso!")
            with st.expander("Visualizar texto colado"):
                st.text(document_text_input[:5000] + ("..." if len(document_text_input) > 5000 else ""))
        
        # Verifica se h√° texto dispon√≠vel para an√°lise pela IA
        if 'document_text' in st.session_state and st.session_state.document_text:
            st.markdown("---")
            st.subheader("An√°lise Preliminar do Documento (IA)")
            if st.button("Analisar Texto com IA"):
                with st.spinner("A IA est√° analisando o texto... Isso pode levar alguns segundos."):
                    try:
                        # Prompt para a an√°lise do documento pela IA
                        prompt_analise = f"""
                        Analise o seguinte texto jur√≠dico. Identifique as seguintes informa√ß√µes:
                        1. Um breve resumo do conte√∫do (m√°ximo 5 frases).
                        2. O(s) ramo(s) do direito mais prov√°vel(is) (Ex: Civil, Criminal, Previdenci√°rio, Administrativo, etc.).
                        3. Os 5-7 pontos mais importantes ou palavras-chave relevantes (entidades, conceitos-chave).
                        4. As partes envolvidas (Requerente/Autor, Requerido/R√©u, etc.).
                        5. O objetivo principal da pe√ßa (Ex: Cobran√ßa, Defesa, Recurso, etc.).

                        Formate a resposta de forma clara e com t√≥picos (use Markdown para negrito e listas):
                        **Resumo:** [Seu resumo aqui]
                        **Ramo(s) do Direito:** [Ramo1, Ramo2]
                        **Pontos Chave:** [ponto1, ponto2, ponto3, ...]
                        **Partes Envolvidas:** [Parte A: Nome, Parte B: Nome]
                        **Objetivo da Pe√ßa:** [Objetivo]

                        Texto para an√°lise:
                        {st.session_state.document_text}
                        """
                        response = model.generate_content(prompt_analise)
                        st.markdown(response.text) # Usa markdown para formatar a resposta da IA

                    except Exception as e:
                        st.error(f"Erro ao gerar an√°lise da IA: {str(e)}")
                        st.info("Verifique se o texto √© leg√≠vel e se h√° conectividade com a API do Gemini. Tente reduzir o tamanho do texto se for muito longo.")
                        st.exception(e)
        else:
            st.info("Carregue ou cole um documento para iniciar a an√°lise.")

    # --- Aba 2: Gera√ß√£o de Estrat√©gia e Argumentos ---
    with tab2:
        st.subheader("2. Gera√ß√£o de Estrat√©gia e Argumentos")
        if 'document_text' not in st.session_state or not st.session_state.document_text:
            st.warning("Por favor, carregue ou cole um documento na aba 'An√°lise e Upload' primeiro para gerar uma estrat√©gia.")
        else:
            st.info(f"Gerando estrat√©gia para **{tipo_acao}** na √°rea **{area_juridica}**.")
            st.write("Considerando o texto da pe√ßa jur√≠dica e o contexto fornecido.")

            if st.button(f"Gerar Estrat√©gia de {tipo_acao}"):
                with st.spinner(f"A IA est√° formulando a estrat√©gia de {tipo_acao}... Isso pode levar alguns segundos."):
                    try:
                        # Chama as fun√ß√µes dos m√≥dulos 'services' para gerar a estrat√©gia
                        if tipo_acao == "Defesa":
                            strategy = generate_defense(st.session_state.document_text, area_juridica, contexto_estrategia, model)
                        else: # Acusa√ß√£o
                            strategy = generate_accusation(st.session_state.document_text, area_juridica, contexto_estrategia, model)

                        st.subheader(f"Estrat√©gia de {tipo_acao} Recomendada pela IA:")
                        st.markdown(strategy) # Usa markdown para formatar a resposta da IA

                    except Exception as e:
                        st.error(f"Erro ao gerar estrat√©gia de {tipo_acao}: {str(e)}")
                        st.info("Verifique a qualidade do texto e do prompt. Tente novamente.")
                        st.exception(e)

    # --- Aba 3: Busca de Legisla√ß√£o e Jurisprud√™ncia ---
    with tab3:
        st.subheader("3. Busca de Legisla√ß√£o e Jurisprud√™ncia")

        # Se√ß√£o para buscar Legisla√ß√£o (usando o Gemini como exemplo, para uma API real seria diferente)
        search_term_legis = st.text_input("Buscar Legisla√ß√£o (ex: 'Lei 8.213/91', 'C√≥digo Civil Art. 421')", key="legis_search")
        if st.button("Buscar Legisla√ß√£o (Exemplo via IA)", key="btn_legis_search"):
            if search_term_legis:
                with st.spinner(f"Buscando legisla√ß√£o para '{search_term_legis}'..."):
                    try:
                        legis_prompt = f"""
                        Com base na legisla√ß√£o brasileira, forne√ßa informa√ß√µes sobre: {search_term_legis}.
                        Inclua o n√∫mero da lei, artigo(s) relevante(s) e um breve resumo.
                        Se n√£o for uma lei espec√≠fica, forne√ßa conceitos gerais relacionados ao termo.
                        Forne√ßa a resposta em Portugu√™s-BR.
                        """
                        response_legis = model.generate_content(legis_prompt)
                        st.subheader(f"Legisla√ß√£o Encontrada para '{search_term_legis}' (Via IA):")
                        st.markdown(response_legis.text)
                    except Exception as e:
                        st.error(f"Erro ao buscar legisla√ß√£o com IA: {str(e)}")
                        st.exception(e)
            else:
                st.warning("Por favor, digite um termo para buscar legisla√ß√£o.")

        st.markdown("---")

        # Se√ß√£o para buscar Jurisprud√™ncia (usando o mock/API que voc√™ configurar√° em utils/legal_api.py)
        search_term_juris = st.text_input("Buscar Jurisprud√™ncia (ex: 'danos morais', 'responsabilidade civil')", key="juris_search")
        if st.button("Buscar Jurisprud√™ncia Externa", key="btn_juris_search"):
            if search_term_juris:
                with st.spinner(f"Buscando jurisprud√™ncia para '{search_term_juris}' na √°rea '{area_juridica}'..."):
                    try:
                        # Chama a fun√ß√£o do seu utils/legal_api.py (que ainda √© um mock ou sua API real)
                        results = fetch_jurisprudence(search_term_juris, area_juridica)
                        if results and not results.get("error"):
                            st.subheader(f"Resultados da Jurisprud√™ncia para: '{results.get('termo', search_term_juris)}'")
                            if results['resultados']:
                                for res in results['resultados']:
                                    st.json(res) # Exibe o resultado como JSON formatado
                            else:
                                st.info("Nenhum resultado de jurisprud√™ncia encontrado para o termo especificado.")
                        else:
                            st.error("N√£o foi poss√≠vel buscar a jurisprud√™ncia. Verifique os logs e a configura√ß√£o da API externa.")
                            if results and "error" in results:
                                st.code(results["error"])
                    except Exception as e:
                        st.error(f"Erro na busca de jurisprud√™ncia: {str(e)}")
                        st.exception(e)
            else:
                st.warning("Por favor, digite um termo para buscar jurisprud√™ncia.")

# Disclaimer final do aplicativo
st.markdown("---")
st.caption("‚ö†Ô∏è **Aten√ß√£o:** Este aplicativo utiliza intelig√™ncia artificial e serve apenas como uma ferramenta de **assist√™ncia**. As informa√ß√µes geradas n√£o constituem aconselhamento jur√≠dico e devem ser sempre revisadas e validadas por um profissional do direito qualificado.")
st.caption("A busca de jurisprud√™ncia externa √© uma simula√ß√£o. Para uso real, configure a URL e os par√¢metros de uma API jur√≠dica p√∫blica (ex: TJDFT, CNJ DataJud) ou paga.")

# Ponto de entrada do aplicativo
if __name__ == "__main__":
    main()
